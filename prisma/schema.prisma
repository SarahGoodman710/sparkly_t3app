// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Bonus {
    BonusId     Int       @id @default(autoincrement())
    EmployeeId  String    @db.VarChar(250)
    BonusTypeId Int
    Amount      Decimal   @db.Decimal(19, 2)
    Date        DateTime  @default(now()) @db.DateTime(0)
    employee    Employee  @relation(fields: [EmployeeId], references: [EmployeeId], onDelete: Cascade)
    bonusType   BonusType @relation(fields: [BonusTypeId], references: [BonusTypeId], onDelete: Cascade)

    @@index([BonusTypeId])
    @@index([EmployeeId])
}

model BonusType {
    BonusTypeId  Int     @id @default(autoincrement())
    BonusTypeKey String  @unique(map: "BonusTypeKey") @db.VarChar(250)
    Description  String? @db.VarChar(250)
    Bonus        Bonus[]
}

model Business {
    BusinessId  Int         @id @default(autoincrement())
    BusinessKey String      @unique(map: "BusinessKey") @db.VarChar(250)
    Description String?     @db.VarChar(250)
    TimeSheet   TimeSheet[]
    Tip         Tip[]
}

model Employee {
    EmployeeId String      @id @db.VarChar(250)
    FirstName  String      @db.VarChar(250)
    LastName   String      @db.VarChar(250)
    Bonus      Bonus[]
    TimeSheet  TimeSheet[]
}

model Role {
    RoleId      Int         @id @default(autoincrement())
    RoleKey     String      @unique(map: "RoleKey") @db.VarChar(250)
    Description String?     @db.VarChar(250)
    TimeSheet   TimeSheet[]
}

model TimeSheet {
    TimeSheetId Int      @id @default(autoincrement())
    EmployeeId  String   @db.VarChar(250)
    BusinessId  Int
    RoleId      Int?
    Date        DateTime @db.DateTime(0)
    Rate        Decimal  @db.Decimal(19, 2)
    Regular     Decimal  @db.Decimal(19, 2)
    Overtime    Decimal  @db.Decimal(19, 2)
    employee    Employee @relation(fields: [EmployeeId], references: [EmployeeId], onDelete: Cascade)
    business    Business @relation(fields: [BusinessId], references: [BusinessId], onDelete: Cascade)
    role        Role?    @relation(fields: [RoleId], references: [RoleId], onDelete: Cascade)

    @@index([BusinessId])
    @@index([EmployeeId])
    @@index([RoleId])
}

model Tip {
    TipId      Int      @id @default(autoincrement())
    TipTypeId  Int
    Amount     Decimal  @db.Decimal(19, 2)
    Date       DateTime @default(now()) @db.DateTime(0)
    PercentOff Decimal  @default(0.00) @db.Decimal(19, 2)
    BusinessId Int
    business   Business @relation(fields: [BusinessId], references: [BusinessId], onDelete: Cascade)
    tipType    TipType  @relation(fields: [TipTypeId], references: [TipTypeId], onDelete: Cascade)

    @@index([BusinessId])
    @@index([TipTypeId])
}

model TipType {
    TipTypeId   Int     @id @default(autoincrement())
    TipTypeKey  String  @unique(map: "TipTypeKey") @db.VarChar(250)
    Description String? @db.VarChar(250)
    Tip         Tip[]
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
